
let path = require('path');
let fs = require('fs');
let appDir = path.dirname(require.main.filename);

const LOG_DIR = path.normalize(appDir + '/logs');

if (!fs.existsSync(LOG_DIR)) {
    try {
      fs.mkdirSync(LOG_DIR);
    } catch (error) {
        console.error("Error while creating directory", LOG_DIR, "error:", error);
    }
}

const winston= require('winston');
const { createLogger, format, transports, loggers } = winston;
const { combine, timestamp, label, printf } = format;

transports.DailyRotateFile = require('winston-daily-rotate-file');

const myFormat = printf(info => {
      info.pid = process.pid;
      info.message = info.message;
      return `${info.timestamp} : [${info.label}] : ${info.pid} : ${info.level} : ${info.message}`;
});

var initialized = false;

const logger =  function(opts)
{      

      if(initialized)
        return winston;

      let max_size = "250m";
      let max_files = "3d";
      let log_env = "production";
      let log_module = "callbreak";
      let log_level = "debug";
      let log_file_name = LOG_DIR + "/callbreak-game-service.log";
      let error_file_name = LOG_DIR + "/callbreak-game-service-error.log";

      if(opts)
      {
          if(opts.max_size)
              max_size = opts.max_size;
          if(opts.max_files)
              max_files = opts.max_files;
          if(opts.log_env)
              log_env = opts.log_env;
          if(opts.module_name)
              log_module = opts.module_name;
          if(opts.log_level)
              log_level = opts.log_level;
          if(opts.log_file)
              log_file_name = LOG_DIR + opts.log_file;
          if(opts.error_file)
              error_file_name = LOG_DIR + opts.error_file;
      }
      log_module = log_module.substring(log_module.lastIndexOf("/") + 1);

      transport_list = [
                          new transports.DailyRotateFile({ dirname: LOG_DIR, zippedArchive: false, maxSize: max_size, maxFiles: max_files, datePattern: 'YYYY-MM-DD_HH', prettyPrint: true, prepend: true, filename: log_file_name, level: log_level}),
                          new transports.DailyRotateFile({ dirname: LOG_DIR,  zippedArchive: false, maxSize: max_size, maxFiles: max_files, datePattern: 'YYYY-MM-DD_HH', prettyPrint: true, prepend: true, filename: error_file_name, level: 'error'})
                       ]

      if(log_env !== 'production')
        transport_list.push(new transports.Console({ json: false, prettyPrint: true }));

      winston.configure({
		  level: log_level,
		  format: winston.format.combine(
				format.splat(),
				format.simple(),
				label({label: log_module}),
				timestamp(),
				myFormat
		  ),
		  transports: transport_list
	});


      /*return createLogger({

          // set logging level one of { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }
          level: log_level,

          //format: format.json(),
          format: combine(
		format.splat(),
		format.simple(),
                label({label: log_module}),
                timestamp(),
                myFormat
          ),

          transports: transport_list
      });*/
      initialized = true;
      return winston;
};

module.exports = logger;
